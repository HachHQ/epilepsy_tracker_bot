from aiogram import Router, F
from aiogram.types import Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from matplotlib.cbook import CallbackRegistry
from sqlalchemy.ext.asyncio import AsyncSession

from handlers_logic.states_factories import SosForm
from keyboards.notification_kb import get_choose_sos_notify_mode_kb
from keyboards.profile_form_kb import get_geolocation_for_timezone_kb
from lexicon.lexicon import LEXICON_RU
from services.notification_queue import NotificationQueue, SosMassNotification
from services.redis_cache_data import get_cached_trusted_persons_agrigated_data

sos_router = Router()

@sos_router.callback_query(F.data == 'sos_notification')
async def process_ask_for_geoloc(callback: CallbackRegistry, state: FSMContext):
    await callback.message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', —á—Ç–æ–±—ã —Ä–∞–∑–æ—Å–ª–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± —É—Ö—É–¥—à–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–º –ª–∏—Ü–∞–º."
                         , reply_markup=get_choose_sos_notify_mode_kb(), parse_mode='HTML')
    #await state.set_state(SosForm.geolocation)
    await callback.answer()

def get_sos_notify_message_with_args(tg_name, tg_username, location = None):
    text = (
        f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {tg_name} —Å–æ–æ–±—â–∏–ª –æ –ø—Ä–∏—Å—Ç—É–ø–µ —ç–ø–∏–ª–µ–ø—Å–∏–∏.\n"
        f"–ï–≥–æ —é–∑–µ—Ä–Ω–µ–π–º –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ - {'@'+tg_username if tg_username else ''}\n"
        f"üìå –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {location if location else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}\n\n"
        "üîΩ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:\n"
        " - –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∏–º/–Ω–µ–π, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ.\n"
        " - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω/–æ–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –ø–æ–ª–æ–∂–µ–Ω–∏–∏ (–Ω–∞ –±–æ–∫—É, –ø–æ–¥–ª–æ–∂–∏—Ç—å —á—Ç–æ-—Ç–æ –º—è–≥–∫–æ–µ –ø–æ–¥ –≥–æ–ª–æ–≤—É).\n"
        " - –ù–µ —É–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —á–µ–ª–æ–≤–µ–∫–∞, –Ω–µ –∫–ª–∞–¥–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤ —Ä–æ—Ç.\n"
        " - –ï—Å–ª–∏ –ø—Ä–∏—Å—Ç—É–ø –¥–ª–∏—Ç—Å—è –¥–æ–ª—å—à–µ 5 –º–∏–Ω—É—Ç ‚Äî –≤—ã–∑—ã–≤–∞–π—Ç–µ —Å–∫–æ—Ä—É—é: 103.\n\n"
        "üß† –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –ø–æ—Å–ª–µ –ø—Ä–∏—Å—Ç—É–ø–∞ —á–µ–ª–æ–≤–µ–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–µ–∑–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω. –û—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å —Å –Ω–∏–º/–Ω–µ–π, –ø–æ–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —É–ª—É—á—à–∏—Ç—Å—è."
    )
    return text

def get_tr_usernames_of_user(tr_users):
    text = (
        "–î–æ–≤–µ—Ä–µ–Ω–Ω—ã–º –ª–∏—Ü–∞–º –≤—ã—Å–ª–∞–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: \n"
    )
    for tr in tr_users:
        if tr['permissions']['get_notification']:
                text += f"{'@'+tr['trusted_user']['telegram_username'] if tr['trusted_user']['telegram_username'] is not None else tr['trusted_user']['telegram_fullname']}\n"
    return text

@sos_router.callback_query(F.data.startswith('sos_notify_with_geo'))
async def process_send_sos_notify_to_trusted_persons(callback: CallbackRegistry, state: FSMContext, db: AsyncSession, notification_queue: NotificationQueue):
    first_name = callback.from_user.full_name
    username = callback.from_user.username if callback.from_user.username else "–Ω–µ—Ç username"
    text = get_sos_notify_message_with_args(first_name, username)
    trusted_persons = await get_cached_trusted_persons_agrigated_data(db, callback.message.chat.id)
    unique = {}
    for tr in trusted_persons:
        try:
            if tr['permissions']['get_notification']:
                unique[tr['trusted_user']['id']] = tr['trusted_user']['telegram_id']
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø–∏—Å–∏ {tr}: {e}")
    trusted_persons_tg_ids = list(unique.values())
    if len(trusted_persons_tg_ids) == 0:
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ª–∏—Ü, –∫–æ—Ç–æ—Ä—ã–º –≤—ã —Ä–∞–∑—Ä–µ—à–∏–ª–∏ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
    await callback.message.answer(get_tr_usernames_of_user(trusted_persons))
    await notification_queue.enqueue(SosMassNotification(trusted_persons_tg_ids, text))
    await callback.answer()


#@sos_router.location()