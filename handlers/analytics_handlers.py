import os

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from datetime import datetime, timezone

from database.orm_query import get_avg_duration_by_month, get_top_seizure_features
from filters.correct_commands import ProfileIsSetCb, ProfileIsSetMsg
from keyboards.journal_kb import get_graphs_type
from keyboards.seizure_kb import build_statistics_navigation_keyboard
from services.graph_stat_builder import (
    compute_seizure_statistics, draw_avg_duration_bar_chart, format_seizure_statistics,
    format_top_features, get_hour_distribution_plot, get_month_distribution_plot,
    get_weekday_distribution_plot, get_year_gist, get_month_gist,
    get_year_gist_with_courses
)
from services.redis_cache_data import get_cached_current_profile

analytics_router = Router()


@analytics_router.callback_query(F.data == "graphs", ProfileIsSetCb())
async def process_graphs_cmd(callback: CallbackQuery):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–æ–≤:\n"
        f" - –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏—Å—Ç—É–ø–æ–≤ \n"
        f" - –ß–∞—Å—Ç–æ—Ç–∞ –ø—Ä–∏—Å—Ç—É–ø–æ–≤\n"
        f" - –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤\n",
        reply_markup=get_graphs_type()
    )
    await callback.answer()

@analytics_router.callback_query(F.data == "duration_graphs", ProfileIsSetCb())
async def process_graphs_cmd(callback: CallbackQuery):
    await callback.message.answer(
        "–°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏—Å—Ç—É–ø–æ–≤ –ø–æ –≥–æ–¥–∞–º (–≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–º—É –≤–∞—Å –≥–æ–¥—É, –¥–æ–±–∞–≤–∏–≤ –µ–≥–æ –≤ –∫–æ–Ω–µ—Ü –∫–æ–º–∞–Ω–¥—ã).\n\n"
        f"   - –ó–∞ {datetime.now(timezone.utc).year} –≥–æ–¥ /get_duration_{datetime.now(timezone.utc).year}\n\n"
        f"   - –ó–∞ {datetime.now(timezone.utc).year - 1} –≥–æ–¥ /get_duration_{datetime.now(timezone.utc).year - 1}\n\n"
        f"   - –ó–∞ {datetime.now(timezone.utc).year - 2} –≥–æ–¥ /get_duration_{datetime.now(timezone.utc).year - 2}\n\n"
    )
    await callback.answer()

@analytics_router.callback_query(F.data == "frequency_graphs", ProfileIsSetCb())
async def process_graphs_cmd(callback: CallbackQuery):
    await callback.message.answer(
        "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –ø—Ä–∏—Å—Ç—É–ø–æ–≤.\n"
        "   - –í —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è - /get_hour_distribution\n\n"
        "   - –í —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏ - /get_week_distribution\n\n"
        "   - –í —Ç–µ—á–µ–Ω–∏–µ –≥–æ–¥–∞ - /get_month_distribution\n\n"
        "–ß–∞—Å—Ç–æ—Ç–∞ –ø—Ä–∏—Å—Ç—É–ø–æ–≤ –ø–æ –≥–æ–¥—É/–º–µ—Å—è—Ü—É (–≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–º—É –≤–∞—Å –≥–æ–¥—É/–º–µ—Å—è—Ü—É, –¥–æ–±–∞–≤–∏–≤ –µ–≥–æ –≤ –∫–æ–Ω–µ—Ü –∫–æ–º–∞–Ω–¥—ã).\n"
    )
    await callback.answer()

@analytics_router.callback_query(F.data == "efficiency_graphs", ProfileIsSetCb())
async def process_graphs_cmd(callback: CallbackQuery, db: AsyncSession):
    await callback.message.answer(
        "–ß–∞—Å—Ç–æ—Ç–∞ –ø—Ä–∏—Å—Ç—É–ø–æ–≤ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∫—É—Ä—Å–æ–≤ –ª–µ–∫–∞—Ä—Å—Ç–≤: (–≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–º—É –≤–∞—Å –≥–æ–¥—É, –¥–æ–±–∞–≤–∏–≤ –µ–≥–æ –≤ –∫–æ–Ω–µ—Ü –∫–æ–º–∞–Ω–¥—ã)\n"
        f"   - –ó–∞ {datetime.now(timezone.utc).year} –≥–æ–¥ /get_drug_efficiency_{datetime.now(timezone.utc).year}\n\n"
        f"   - –ó–∞ {datetime.now(timezone.utc).year - 1} –≥–æ–¥ /get_drug_efficiency_{datetime.now(timezone.utc).year - 1}\n\n"
        f"   - –ó–∞ {datetime.now(timezone.utc).year - 2} –≥–æ–¥ /get_drug_efficiency_{datetime.now(timezone.utc).year - 2}\n\n"

    )
    await callback.answer()

@analytics_router.callback_query(F.data == "view:features", ProfileIsSetCb())
async def switch_to_features(callback: CallbackQuery, db: AsyncSession):
    profile = await get_cached_current_profile(db, callback.message.chat.id)
    if not profile:
        return await callback.message.edit_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å.")

    profile_id = int(profile.split("|")[0])
    profile_name = profile.split("|")[1]

    result = await get_top_seizure_features(db, profile_id)
    text = format_top_features(profile_name, result["top_symptoms"], result["top_triggers"], result["top_types"])
    await callback.message.edit_text(text, reply_markup=build_statistics_navigation_keyboard(current_page="features"), parse_mode="HTML")
    await callback.answer()

@analytics_router.message(F.text.startswith("/get_hour_distribution"), ProfileIsSetMsg())
async def handle_hour_distribution(message: Message, db: AsyncSession):
    await get_hour_distribution_plot(db, message)

@analytics_router.message(F.text == "/get_week_distribution", ProfileIsSetMsg())
async def handle_weekday_distribution(message: Message, db: AsyncSession):
    await get_weekday_distribution_plot(db, message)

@analytics_router.message(F.text == "/get_month_distribution", ProfileIsSetMsg())
async def handle_month_distribution(message: Message, db: AsyncSession):
    await get_month_distribution_plot(db, message)

@analytics_router.message(F.text.regexp(r"/get_duration_(\d{4})"), ProfileIsSetMsg())
async def get_duration_graph(message: Message, db: AsyncSession):
    year = int(message.text.split("_")[-1])
    profile = await get_cached_current_profile(db, message.chat.id)
    profile_id = int(profile.split("|")[0])
    profile_name = profile.split("|")[1]
    data = await get_avg_duration_by_month(db, profile_id, year)
    if not data:
        return await message.answer(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏—Å—Ç—É–ø–æ–≤ –∑–∞ {year} –≥–æ–¥.")
    chart_file = draw_avg_duration_bar_chart(data, year, profile_name)
    await message.answer_photo(
        photo=chart_file,
        caption=f"üìä –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏—Å—Ç—É–ø–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º –∑–∞ {year} –≥–æ–¥ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è <b>{profile_name}</b>",
        parse_mode="HTML"
    )
    os.remove(chart_file.path)

@analytics_router.message(F.text.startswith("/get_drug_efficiency_"), ProfileIsSetMsg())
async def handle_drug_efficiency_command(message: Message, db: AsyncSession):
    await get_year_gist_with_courses(db, message)


@analytics_router.message(F.text == '/get_year_gist', ProfileIsSetMsg())
async def process_graphs_cmd(message: Message, state: FSMContext, db: AsyncSession):
    await get_year_gist(db, message)

@analytics_router.message(F.text == '/get_month_gist', ProfileIsSetMsg())
async def process_graphs_cmd(message: Message, state: FSMContext, db: AsyncSession):
    await get_month_gist(db, message)


@analytics_router.callback_query((F.data == "stats") | (F.data == 'stats_edit'), ProfileIsSetCb())
async def process_stats_cmd(callback: CallbackQuery, state: FSMContext, db: AsyncSession):
    stat_data = await compute_seizure_statistics(db, callback.message)
    text = format_seizure_statistics(stat_data)
    if callback.data ==  'stats_edit':
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=build_statistics_navigation_keyboard(current_page="stats"))
    else:
        await callback.message.answer(text, parse_mode="HTML", reply_markup=build_statistics_navigation_keyboard(current_page="stats"))
    await callback.answer()
